{"version":3,"sources":["logo.svg","SortingVisual.js","App.js","reportWebVitals.js","index.js"],"names":["arrayCopy","enableBinarySearchDiv","SortingVisual","props","useState","array","setarray","resetArray","setResetarray","binaryQueue","setBinaryQueue","uniquearrMsg","setUniqueuearrMsg","useEffect","randomArray","arr","i","push","randomIntFromInterval","console","log","setTimeout","min","max","Math","floor","random","mergeSort","arrParam","halfArr","length","left","right","newArr","shift","merge","splice","className","id","onClick","data","sortArr","map","a","barOneStyle","document","getElementsByClassName","style","height","backgroundColor","mergeShortArray","unique","Set","uniqueArray","n","s1","binarySearch","result","toString","binarySearchAllArray","display","marginLeft","width","verticalAlign","fontSize","transition","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6ea7ffaa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect} from \"react\";\r\nlet arrayCopy = [];\r\nlet enableBinarySearchDiv = false;\r\n\r\nfunction SortingVisual(props) {\r\n    const NUMBER_OF_ARRAY_BARS = 25;\r\n    const [array,setarray] = useState([]);\r\n    const [resetArray,setResetarray] = useState(true);\r\n    const [binaryQueue,setBinaryQueue] = useState(\"\");\r\n    const [uniquearrMsg,setUniqueuearrMsg] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        randomArray();\r\n    },[]);\r\n\r\n\r\n    const randomArray = () => {\r\n        let arr = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            arr.push(randomIntFromInterval(15, 300));\r\n        }\r\n        arrayCopy = [...arr];\r\n        setarray([\r\n            ...arrayCopy,\r\n        ]);\r\n        // Updating on click on randomArray function\r\n        setResetarray(true);\r\n        console.log(arr)\r\n        setTimeout(()=>{\r\n            console.log(\"After\",array)\r\n        },2000)\r\n        \r\n    }\r\n\r\n    const randomIntFromInterval = (min, max) => {\r\n        // min and max included\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    const merge = (left, right) => {\r\n        let newArr = [];\r\n\r\n        while (left.length && right.length) {\r\n            if (left[0] < right[0]) {\r\n                newArr.push(left.shift());\r\n            } else {\r\n                newArr.push(right.shift());\r\n            }\r\n        }\r\n\r\n        return [...newArr, ...left, ...right];\r\n    }\r\n\r\n    const mergeSort = (arrParam) => {\r\n        let halfArr = arrParam.length / 2;\r\n        if (arrParam.length < 2) {\r\n            return arrParam;\r\n        }\r\n        let left = arrParam.splice(0, halfArr);\r\n        let leftSort = mergeSort(left);\r\n        let rightHalf = mergeSort(arrParam);\r\n        return merge(leftSort, rightHalf);\r\n    }\r\n\r\n    const mergeShortArray = () => {\r\n        let newArr = [...array];\r\n        let sortArr = mergeSort(newArr);\r\n        setResetarray(false);\r\n        sortArr.map((a,i)=>{\r\n                const barOneStyle = document.getElementsByClassName(\"array-bar\")[i];\r\n                // const barTwoStyle = document.getElementById(\"arr-bar\"+sortArr[i+1]);//document.getElementById(\"arr-bar\"+sortArr[i+1]);\r\n                // barOneStyle.style.transition=\"1s\"\r\n                // barTwoStyle && (barTwoStyle.style.backgroundColor=\"red\");\r\n                barOneStyle.style.height=a+\"px\";\r\n                barOneStyle.style.backgroundColor=\"chartreuse\";\r\n                // setTimeout(() => {\r\n                //     barOneStyle.backgroundColor = \"red\";\r\n                //     barTwoStyle.height= a + 'px';\r\n                // }, i * 10);\r\n        });\r\n        // Sort Array\r\n        setarray([\r\n            ...sortArr,\r\n        ]);\r\n    }\r\n    const uniqueArray = () => {\r\n        let newArr = [...array];\r\n        // Sort Array\r\n        let unique = [...new Set(newArr)];\r\n        setarray([\r\n            ...unique\r\n        ]);\r\n        // If duplicate array is not present in \"array\" queue then return message\r\n        if (newArr.length === unique.length){\r\n            setUniqueuearrMsg(\"No duplicate array present in the list\");\r\n        } else {\r\n            setUniqueuearrMsg(\"Removed duplicate array from the list\");\r\n        }\r\n    }\r\n\r\n    const binarySearchAllArray = (n) => {\r\n        setBinaryQueue(\"\");\r\n        let arr = [];\r\n        let result = [];\r\n        arr.push(\"1\");\r\n        var i = 0;\r\n        while (i < n) {\r\n            console.log(arr[0]); // Print each binary value\r\n            result.push(arr.shift());\r\n            i == n -1 && setBinaryQueue(result.toString()); // set into react state to print on UI\r\n            arr.push(result[i] + \"0\");\r\n            arr.push(result[i] + \"1\");\r\n            i++;\r\n        }\r\n        enableBinarySearchDiv =true;\r\n    }\r\n\r\n    const binarySearch = (n) => {\r\n\r\n        setBinaryQueue(\"\");\r\n        let arr = [];\r\n        arr.push(\"1\");\r\n        var i = 0;\r\n        while (i < n) {\r\n            var s1 = arr[0];\r\n            console.log(s1);\r\n            setBinaryQueue(s1);\r\n            arr.shift();\r\n            arr.push(s1 + \"0\");\r\n            arr.push(s1 + \"1\");\r\n            i++;\r\n        }\r\n        enableBinarySearchDiv =true;\r\n    }\r\n\r\n    const arrayVisual = () => {\r\n        return (array.map((a,i) => {\r\n            // Adding following condition to forcefully reset bar color and it is not updating using CSS, because React wants new property to update it into dom. \r\n            if (resetArray && document.getElementsByClassName(\"array-bar\")[i]) {\r\n                const barOneStyle = document.getElementsByClassName(\"array-bar\")[i];\r\n                barOneStyle.style.backgroundColor = \"turquoise\";\r\n            }\r\n            return (\r\n                <div key={i}\r\n                    className=\"array-bar\"\r\n                    id={`arr-bar${a}`}\r\n                    style={\r\n                        {\r\n                            backgroundColor: \"turquoise\",\r\n                            height: a + 'px',\r\n                            display: \"inline-block\",\r\n                            marginLeft: \"3px\",\r\n                            width: \"2.5%\",\r\n                            verticalAlign: \"top\",\r\n                            fontSize: \"1.3vw\",\r\n                            transition: \"1s\"\r\n                        }\r\n                    }>\r\n                        {a}\r\n                </div>\r\n            )\r\n        })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {uniquearrMsg && <div className=\"array-visual\">{uniquearrMsg}</div>}\r\n            {enableBinarySearchDiv && <div className=\"array-visual\">Binary Numbers from 1 to n: (Array length: {array.length})  {binaryQueue && binaryQueue}</div>}\r\n            \r\n            <button id='merge-sort' onClick={(data) => randomArray()}>Reset Array</button>\r\n            <button id='merge-sort' onClick={(data) => mergeShortArray()}>Merge Sort Array</button>\r\n            <button id='merge-sort' onClick={(data) => uniqueArray()}>Unique Array</button>\r\n            <button id='merge-sort' onClick={(data) => binarySearch(array.length)}>Binary Search</button>\r\n            <button id='merge-sort' onClick={(data) => binarySearchAllArray(array.length)}>Binary Search All array</button>\r\n            <div className=\"array-visual\">{array && arrayVisual()}</div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default SortingVisual;\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisual from \"./SortingVisual\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <SortingVisual></SortingVisual>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}